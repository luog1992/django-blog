import urllib
import json
import datetime


class AdAccountReporter(object):
    breakdown_paras = {
        'default': {
            'time_increment': '',
            'breakdowns': '',
        },
        'country': {
            'time_increment': '',
            'breakdowns': 'country',
        },
        'day': {
            'time_increment': 1,
            'breakdowns': '',
        },
        'daycountry': {
            'time_increment': 1,
            'breakdowns': 'country',
        }
    }

    def __init__(self, account_id, date_start, date_stop, breakdowns='default'):
        self.access_token = 'EAADb0NhbMsABAFLMKYYZCZB0UClPDBy7CgQSMgkLuW0B7agA1H2Jql7KuavCGbHx5XZApZCoxIMm03zG9eApcQhzELFfD9sJHj1KSbc9RHTg3r6wgmiZCpcQWkHCTDeGMq6iL8Hw1Ecf4MLzANKXKGo53JR1cvnLF7oFQ72RT7QZDZD'
        self.account_id = 'act_%s' % account_id
        self.fields = 'impressions,clicks,actions'
        self.time_range = """{"since":"%s","until":"%s"}""" % (
            date_start, date_stop)
        self.raw_breakdowns = breakdowns
        self.time_increment = self.__class__.breakdown_paras[
            breakdowns]['time_increment']
        self.breakdowns = self.__class__.breakdown_paras[
            breakdowns]['breakdowns']
        self.url = 'https://graph.facebook.com/v2.7/%s/insights?access_token=%s&fields=%s&time_range=%s \
            &time_increment=%s&breakdowns=%s&include_headers=false&limit=1000' % (
            self.account_id,
            self.access_token,
            self.fields,
            self.time_range,
            self.time_increment,
            self.breakdowns
        )

    def get_data(self, url):
        response = json.loads(urllib.urlopen(url).read())
        data = response.get('data', None)
        paging = response.get('paging', None)
        if paging:
            next_url = paging.get('next', None)
            if next_url:
                data += self.get_data(next_url)
                return data
            else:
                return data
        else:
            return data

    def get_report(self):
        method = getattr(self, '_get_report_' + self.raw_breakdowns, None)
        if callable(method):
            return method()

    def _get_report_default(self):
        records = self.get_data(self.url)
        if records:
            for record in records:
                date_start = record['date_start']
                date_stop = record['date_stop']
                impressions = record['impressions']
                clicks = record['clicks']
                installs = 0
                actions = record.get('actions', None)
                if actions:
                    for action in actions:
                        if action['action_type'] == 'mobile_app_install':
                            installs = action['value']
            return [date_start, date_stop, impressions, clicks, installs]

    def _get_report_country(self):
        records = self.get_data(self.url)
        results = []
        if records:
            for record in records:
                country = record['country']
                impressions = record['impressions']
                clicks = record['clicks']
                installs = 0
                actions = record.get('actions', None)
                if actions:
                    for action in actions:
                        if action['action_type'] == 'mobile_app_install':
                            installs = action['value']
                results.append([country, impressions, clicks, installs])
            return dict([(item[0], item[1:]) for item in results])

    def _get_report_day(self):
        records = self.get_data(self.url)
        results = []
        if records:
            for record in records:
                date_start = record['date_start']
                impressions = record['impressions']
                clicks = record['clicks']
                installs = 0
                actions = record.get('actions', None)
                if actions:
                    for action in actions:
                        if action['action_type'] == 'mobile_app_install':
                            installs = action['value']
                results.append([date_start, impressions, clicks, installs])
            return dict([(item[0], item[1:]) for item in results])

    def _get_report_daycountry(self):
        records = self.get_data(self.url)
        results = []
        date_keys = []
        if records:
            for record in records:
                date_start = record['date_start']
                date_keys.append(date_start)
                country = record['country']
                impressions = record['impressions']
                clicks = record['clicks']
                installs = 0
                actions = record.get('actions', None)
                if actions:
                    for action in actions:
                        if action['action_type'] == 'mobile_app_install':
                            installs = action['value']
                results.append(
                    [date_start, country, impressions, clicks, installs])

            date_keys = list(set(date_keys))
            clean_result = dict.fromkeys(date_keys)
            for date in date_keys:
                temp = {}
                for result in results:
                    if result[0] == date:
                        temp.update({result[1]: result[2:]})
                clean_result[date] = temp
            return clean_result


def main():
    date_stop = datetime.datetime.now()
    date_start = (date_stop - datetime.timedelta(days=30)).strftime('%Y-%m-%d')
    date_stop = date_stop.strftime('%Y-%m-%d')
    breakdowns = 'day'
    accounts = ['1601150283544200']
    for account_id in accounts:
        reporter = AdAccountReporter(
            account_id, date_start, date_stop, breakdowns)
        report = reporter.get_report()
        print json.dumps(report)


if __name__ == "__main__":
    main()
